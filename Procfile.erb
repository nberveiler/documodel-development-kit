# DMDK Procfile services:
# - all commands must start with 'exec'
# - no inline shell scripts ('&&' or ';')
#

# Datasources
#
redis: exec redis-server <%= config.dmdk_root.join('redis', 'redis.conf') %>
<%= '#' unless config.object_store? %>minio: exec env MINIO_REGION=dmdk MINIO_ACCESS_KEY=minio MINIO_SECRET_KEY=dmdk-minio minio server -C minio/config --address "<%= config.object_store.host %>:<%= config.object_store.port %>" --compat minio/data
postgresql: exec support/postgresql-signal-wrapper <%= config.postgresql.bin %> -D <%= config.postgresql.data_dir %> -k <%= config.postgresql.dir %> -h ''
<%= '#' unless config.postgresql.replica? %>postgresql-replica: exec support/postgresql-signal-wrapper <%= config.postgresql.bin %> -D <%= config.postgresql.replica_dir.join('data') %> -k <%= config.postgresql.replica_dir %> -h ''
<%= '#' unless config.openldap? %>openldap: exec support/exec-cd documodel-openldap libexec/slapd -F slapd.d -d2 -h "ldap://<%= config.hostname %>:3890"

# Backend services
#
rails-background-jobs: exec /usr/bin/env SIDEKIQ_LOG_ARGUMENTS=1 SIDEKIQ_WORKERS=1 RAILS_ENV=development RAILS_RELATIVE_URL_ROOT=$relative_url_root support/exec-cd documodel bin/background_jobs start_foreground

# Frontend services
#
webpack: exec /usr/bin/env NODE_ENV=development DEV_SERVER_STATIC=<%= config.webpack.static?%> WEBPACK_VENDOR_DLL=<%= config.webpack.vendor_dll? %> NO_SOURCEMAPS=<%= !config.webpack.sourcemaps? %> DEV_SERVER_PORT=<%= config.webpack.port %> DEV_SERVER_HOST=<%= config.webpack.host %> support/exec-cd documodel yarn dev-server
rails-web: exec /usr/bin/env RAILS_ENV=development RAILS_RELATIVE_URL_ROOT=$relative_url_root support/exec-cd documodel bin/web start_foreground
rails-actioncable: exec /usr/bin/env RAILS_ENV=development RAILS_RELATIVE_URL_ROOT=$relative_url_root support/exec-cd documodel bin/actioncable start_foreground

# Docker
#
<%= '#' unless config.registry? %>registry: exec support/docker-registry

# Monitoring and tracing
#
<%= '#' unless config.grafana? %>grafana: exec support/exec-cd grafana bin/grafana-server -config grafana.ini
<%= '#' unless config.prometheus? %>prometheus: exec docker run -p 9090:9090 -v <%= config.dmdk_root.join('prometheus', 'prometheus.yml') %>:/etc/prometheus/prometheus.yml prom/prometheus:v2.8.1
<%= '#' unless config.tracer.jaeger? %>jaeger: exec jaeger/jaeger-<%= config.tracer.jaeger.version %>/jaeger-all-in-one --memory.max-traces 512

# Additional services
#
<%= '#' unless config.sshd? %>sshd: exec <%= config.sshd.bin %> -e -D -f <%= config.dmdk_root.join('openssh', 'sshd_config') %>
<%= '#' unless config.nginx? %>nginx: exec <%= config.nginx.bin %> -p <%= config.dmdk_root.join('nginx') %> -c conf/nginx.conf

# Tunneling
#
<%= '#' unless config.auto_devops? %>tunnel_registry: exec ssh -N -o ControlPath=none -o ControlMaster=no -R <%= config.auto_devops.registry.port %>:<%= config.registry.tunnel_host %>:<%= config.registry.tunnel_port %> qa-tunnel.documodel.info
<%= '#' unless config.auto_devops? && config.mattermost? %>tunnel_mattermost: exec ssh -N -o ControlPath=none -o ControlMaster=no -R <%= config.mattermost.port %>:localhost:<%= config.mattermost.local_port %> qa-tunnel.documodel.info

# Mattermost
#
<%= '#' unless config.mattermost? %>mattermost: exec docker run --sig-proxy=true -v <%= config.dmdk_root.join('mattermost', 'data') %>:/mm/mattermost-data/  -v <%= config.dmdk_root.join('mattermost', 'mysql') %>:/var/lib/mysql --publish <%= config.mattermost.local_port %>:8065 <%= config.mattermost.image %>
